cmake_minimum_required(VERSION 3.16)
project(LPCNet LANGUAGES C CXX)

if(NOT WIN32)
  message(FATAL_ERROR Only
                      tested
                      on
                      windows)
endif()

set_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY true)
set(FETCHCONTENT_QUIET FALSE)

include(FetchContent)

FetchContent_Declare(benchmark
                        GIT_REPOSITORY https://github.com/google/benchmark.git
                        GIT_PROGRESS TRUE
                        USES_TERMINAL_DOWNLOAD
                        TRUE)

FetchContent_GetProperties(benchmark)
if(NOT benchmark_POPULATED)
  FetchContent_Populate(benchmark)

  set(BENCHMARK_ENABLE_GTEST_TESTS OFF CACHE BOOL "" FORCE)
  set(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL "" FORCE)
  set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL "" FORCE)

  add_subdirectory(${benchmark_SOURCE_DIR})
endif()

set(model_url https://media.xiph.org/lpcnet/data/lpcnet_data-681d98c.tar.gz)
# TODO: no hardcode?
set(model_source_dir "${CMAKE_CURRENT_BINARY_DIR}/models/")

fetchcontent_declare(lpcnet_data
                     URL
                     ${model_url}
                     SOURCE_DIR
                     "${model_source_dir}")

fetchcontent_getproperties(lpcnet_data)
if(NOT lpcnet_data_POPULATED)
  fetchcontent_populate(lpcnet_data)
endif()

add_library(lpcnet_object
            OBJECT
            src/celt_lpc.cpp
            src/common.cpp
            src/freq.cpp
            src/kiss_fft.cpp
            src/lpcnet.cpp
            src/lpcnet_dec.cpp
            src/lpcnet_enc.cpp
            src/nnet.cpp
            src/pitch.cpp
            ${model_source_dir}/nnet_data.cpp
            ${model_source_dir}/ceps_codebooks.cpp)

target_include_directories(lpcnet_object PUBLIC include src ${model_source_dir})
target_link_libraries(lpcnet_object)
target_compile_definitions(lpcnet_object PRIVATE LPCNET_BUILD DLL_EXPORT)

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  add_definitions(-D__AVX__)
  add_definitions(-D__AVX2__)
  add_definitions(/arch:AVX2)
endif()

if (MSVC)
    # remove default warning level from CMAKE_CXX_FLAGS_INIT
    string (REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT}")
endif()

enable_testing()
add_executable(test_vec src/test_vec.cpp)
target_link_libraries(test_vec lpcnet_object)
add_test(test_vec test_vec)

add_executable(test_lpcnet src/test_lpcnet.cpp)
target_link_libraries(test_lpcnet lpcnet_object)

add_executable(dump_data src/dump_data.cpp)
target_link_libraries(dump_data lpcnet_object)

# fix PI def and variable array
add_executable(ceps_vq_train src/ceps_vq_train.cpp)
target_link_libraries(ceps_vq_train lpcnet_object)

add_executable(lpcnet_demo src/lpcnet_demo.cpp)
target_link_libraries(lpcnet_demo lpcnet_object)

add_library(lpcnet SHARED src/dummy.c)
target_link_libraries(lpcnet lpcnet_object)
target_compile_definitions(lpcnet PRIVATE LPCNET_BUILD DLL_EXPORT)
