cmake_minimum_required(VERSION 3.16)
project(LPCNet LANGUAGES C CXX)

if(NOT WIN32)
  message(FATAL_ERROR Only
                      tested
                      on
                      windows)
endif()

set(model_url https://media.xiph.org/lpcnet/data/lpcnet_data-681d98c.tar.gz)
# TODO: no hardcode?
set(model_source_dir "${CMAKE_CURRENT_BINARY_DIR}/models/")

include(FetchContent)
fetchcontent_declare(lpcnet_data
                     URL
                     ${model_url}
                     SOURCE_DIR
                     "${model_source_dir}")

fetchcontent_getproperties(lpcnet_data)
if(NOT lpcnet_data_POPULATED)
  fetchcontent_populate(lpcnet_data)
endif()

add_library(lpcnet_object
            OBJECT
            src/celt_lpc.cpp
            src/common.cpp
            src/freq.cpp
            src/kiss_fft.cpp
            src/lpcnet.cpp
            src/lpcnet_dec.cpp
            src/lpcnet_enc.cpp
            src/nnet.cpp
            src/pitch.cpp
            ${model_source_dir}/nnet_data.cpp
            ${model_source_dir}/ceps_codebooks.cpp)

target_include_directories(lpcnet_object PUBLIC include src ${model_source_dir})

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  add_definitions(-D__AVX__)
  add_definitions(-D__AVX2__)
  add_definitions(/arch:AVX2)
endif()

if (MSVC)
    # remove default warning level from CMAKE_CXX_FLAGS_INIT
    string (REGEX REPLACE "/W[0-4]" "" CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT}")
endif()

enable_testing()
add_executable(test_vec src/test_vec.cpp)
target_link_libraries(test_vec lpcnet_object)
add_test(test_vec test_vec)

add_executable(test_lpcnet src/test_lpcnet.cpp)
target_link_libraries(test_lpcnet lpcnet_object)

add_executable(dump_data src/dump_data.cpp)
target_link_libraries(dump_data lpcnet_object)

# fix PI def and variable array
add_executable(ceps_vq_train src/ceps_vq_train.cpp)
target_link_libraries(ceps_vq_train lpcnet_object)

add_executable(lpcnet_demo src/lpcnet_demo.cpp)
target_link_libraries(lpcnet_demo lpcnet_object)
